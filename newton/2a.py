import numpy as np
from numpy import sqrt


def fu(u, g):
    u1 = u[0]
    u2 = u[1]
    u3 = u[2]
    u4 = u[3]
    m1 = (sqrt(u1 ** 2 + (1 + u2) ** 2) - 1) ** 2
    m2 = (sqrt(u3 ** 2 + (1 + u4) ** 2) - 1) ** 2
    m3 = (sqrt((1 + u3 - u1) ** 2 + (u4 - u2) ** 2) - 1) ** 2
    m4 = (sqrt((1 + u3) ** 2 + (u4 + 1) ** 2) - sqrt(2)) ** 2
    m5 = (sqrt((1 - u1) ** 2 + (1 + u2) ** 2) - sqrt(2)) ** 2
    g = np.transpose(np.multiply(-1, g))
    m6 = np.dot(g, u)

    return m1 + m2 + m3 + m4 + m5 + m6


def model2(u, g):
    u1 = u[0]
    u2 = u[1]
    u3 = u[2]
    u4 = u[3]
    g = np.multiply(-1, g)
    dmdu1 = 2 * u1 * (sqrt(u1 ** 2 + (u2 + 1) ** 2) - 1) / sqrt(u1 ** 2 + (u2 + 1) ** 2) + 2 * (u1 - 1) * (
            sqrt((1 - u1) ** 2 + (u2 + 1) ** 2) - sqrt(2)) / sqrt((1 - u1) ** 2 + (u2 + 1) ** 2) + 2 * (
                    sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 1) * (u1 - u3 - 1) / sqrt(
        (-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2)

    dmdu2 = 2 * (u2 + 1) * (sqrt((1 - u1) ** 2 + (u2 + 1) ** 2) - sqrt(2)) / sqrt((1 - u1) ** 2 + (u2 + 1) ** 2) + 2 * (
            u2 - u4) * (sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 1) / sqrt(
        (-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) + 2 * (u2 + 1) * (sqrt(u1 ** 2 + (u2 + 1) ** 2) - 1) / sqrt(
        u1 ** 2 + (u2 + 1) ** 2)
    dmdu3 = 2 * u3 * (sqrt(u3 ** 2 + (u4 + 1) ** 2) - 1) / sqrt(u3 ** 2 + (u4 + 1) ** 2) + 2 * (u3 + 1) * (
            sqrt((u3 + 1) ** 2 + (u4 + 1) ** 2) - sqrt(2)) / sqrt((u3 + 1) ** 2 + (u4 + 1) ** 2) + 2 * (
                    sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 1) * (-u1 + u3 + 1) / sqrt(
        (-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2)
    dmdu4 = 2 * (-u2 + u4) * (sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 1) / sqrt(
        (-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) + 2 * (u4 + 1) * (sqrt((u3 + 1) ** 2 + (u4 + 1) ** 2) - sqrt(2)) / sqrt(
        (u3 + 1) ** 2 + (u4 + 1) ** 2) + 2 * (u4 + 1) * (sqrt(u3 ** 2 + (u4 + 1) ** 2) - 1) / sqrt(
        u3 ** 2 + (u4 + 1) ** 2)
    g[0] += dmdu1
    g[1] += dmdu2
    g[2] += dmdu3
    g[3] += dmdu4

    return g


def hessian(u):
    u1 = u[0]
    u2 = u[1]
    u3 = u[2]
    u4 = u[3]
    du1d1 = 2 * u1 ** 2 / (u1 ** 2 + (u2 + 1) ** 2) - 2 * u1 ** 2 * (sqrt(u1 ** 2 + (u2 + 1) ** 2) - 1) / (
            u1 ** 2 + (u2 + 1) ** 2) ** (3 / 2) + 2 * (1 - u1) * (u1 - 1) * (
                    sqrt((1 - u1) ** 2 + (u2 + 1) ** 2) - sqrt(2)) / ((1 - u1) ** 2 + (u2 + 1) ** 2) ** (
                    3 / 2) + 2 * (u1 - 1) ** 2 / ((1 - u1) ** 2 + (u2 + 1) ** 2) + 2 * (u1 - u3 - 1) ** 2 / (
                    (-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) + 2 * (
                    sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 1) / sqrt(
        (-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) + 2 * (sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 1) * (
                    -u1 + u3 + 1) * (u1 - u3 - 1) / ((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) ** (3 / 2) + 2 * (
                    sqrt((1 - u1) ** 2 + (u2 + 1) ** 2) - sqrt(2)) / sqrt((1 - u1) ** 2 + (u2 + 1) ** 2) + 2 * (
                    sqrt(u1 ** 2 + (u2 + 1) ** 2) - 1) / sqrt(u1 ** 2 + (u2 + 1) ** 2)

    du2d1 = 2 * u1 * (u2 + 1) / (u1 ** 2 + (u2 + 1) ** 2) + 2 * u1 * (-u2 - 1) * (sqrt(u1 ** 2 + (u2 + 1) ** 2) - 1) / (
            u1 ** 2 + (u2 + 1) ** 2) ** (3 / 2) + 2 * (u1 - 1) * (-u2 - 1) * (
                    sqrt((1 - u1) ** 2 + (u2 + 1) ** 2) - sqrt(2)) / ((1 - u1) ** 2 + (u2 + 1) ** 2) ** (
                    3 / 2) + 2 * (u1 - 1) * (u2 + 1) / ((1 - u1) ** 2 + (u2 + 1) ** 2) + 2 * (-u2 + u4) * (
                    sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 1) * (u1 - u3 - 1) / (
                    (-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) ** (3 / 2) + 2 * (u2 - u4) * (u1 - u3 - 1) / (
                    (-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2)

    du3d1 = 2 * (-u1 + u3 + 1) * (u1 - u3 - 1) / ((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 2 * (
            sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 1) / sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) + 2 * (
                    sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 1) * (u1 - u3 - 1) ** 2 / (
                    (-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) ** (3 / 2)

    du4d1 = 2 * (-u2 + u4) * (u1 - u3 - 1) / ((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) + 2 * (u2 - u4) * (
            sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 1) * (u1 - u3 - 1) / (
                    (-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) ** (3 / 2)
    du2d2 = 2 * (-u2 - 1) * (u2 + 1) * (sqrt((1 - u1) ** 2 + (u2 + 1) ** 2) - sqrt(2)) / (
            (1 - u1) ** 2 + (u2 + 1) ** 2) ** (3 / 2) + 2 * (-u2 + u4) * (u2 - u4) * (
                    sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 1) / ((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) ** (
                    3 / 2) + 2 * (u2 + 1) ** 2 / ((1 - u1) ** 2 + (u2 + 1) ** 2) + 2 * (u2 - u4) ** 2 / (
                    (-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) + 2 * (
                    sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 1) / sqrt(
        (-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) + 2 * (sqrt((1 - u1) ** 2 + (u2 + 1) ** 2) - sqrt(2)) / sqrt(
        (1 - u1) ** 2 + (u2 + 1) ** 2) + 2 * (u2 + 1) ** 2 / (u1 ** 2 + (u2 + 1) ** 2) + 2 * (
                    sqrt(u1 ** 2 + (u2 + 1) ** 2) - 1) / sqrt(u1 ** 2 + (u2 + 1) ** 2) + 2 * (-u2 - 1) * (
                    u2 + 1) * (sqrt(u1 ** 2 + (u2 + 1) ** 2) - 1) / (u1 ** 2 + (u2 + 1) ** 2) ** (3 / 2)
    du3d2 = 2 * (u2 - u4) * (-u1 + u3 + 1) / ((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) + 2 * (u2 - u4) * (
            sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 1) * (u1 - u3 - 1) / (
                    (-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) ** (3 / 2)
    du4d2 = 2 * (-u2 + u4) * (u2 - u4) / ((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) + 2 * (u2 - u4) ** 2 * (
            sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 1) / ((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) ** (
                    3 / 2) - 2 * (sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 1) / sqrt(
        (-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2)

    du3d3 = 2 * u3 ** 2 / (u3 ** 2 + (u4 + 1) ** 2) - 2 * u3 ** 2 * (sqrt(u3 ** 2 + (u4 + 1) ** 2) - 1) / (
            u3 ** 2 + (u4 + 1) ** 2) ** (3 / 2) + 2 * (-u3 - 1) * (u3 + 1) * (
                    sqrt((u3 + 1) ** 2 + (u4 + 1) ** 2) - sqrt(2)) / ((u3 + 1) ** 2 + (u4 + 1) ** 2) ** (
                    3 / 2) + 2 * (u3 + 1) ** 2 / ((u3 + 1) ** 2 + (u4 + 1) ** 2) + 2 * (
                    sqrt((u3 + 1) ** 2 + (u4 + 1) ** 2) - sqrt(2)) / sqrt((u3 + 1) ** 2 + (u4 + 1) ** 2) + 2 * (
                    -u1 + u3 + 1) ** 2 / ((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) + 2 * (
                    sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 1) / sqrt(
        (-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) + 2 * (sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 1) * (
                    -u1 + u3 + 1) * (u1 - u3 - 1) / ((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) ** (3 / 2) + 2 * (
                    sqrt(u3 ** 2 + (u4 + 1) ** 2) - 1) / sqrt(u3 ** 2 + (u4 + 1) ** 2)

    du4d3 = 2 * u3 * (u4 + 1) / (u3 ** 2 + (u4 + 1) ** 2) + 2 * u3 * (-u4 - 1) * (sqrt(u3 ** 2 + (u4 + 1) ** 2) - 1) / (
            u3 ** 2 + (u4 + 1) ** 2) ** (3 / 2) + 2 * (-u2 + u4) * (-u1 + u3 + 1) / (
                    (-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) + 2 * (u2 - u4) * (
                    sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 1) * (-u1 + u3 + 1) / (
                    (-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) ** (3 / 2) + 2 * (u3 + 1) * (-u4 - 1) * (
                    sqrt((u3 + 1) ** 2 + (u4 + 1) ** 2) - sqrt(2)) / ((u3 + 1) ** 2 + (u4 + 1) ** 2) ** (
                    3 / 2) + 2 * (u3 + 1) * (u4 + 1) / ((u3 + 1) ** 2 + (u4 + 1) ** 2)

    du4d4 = 2 * (-u2 + u4) ** 2 / ((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) + 2 * (-u2 + u4) * (u2 - u4) * (
            sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 1) / ((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) ** (
                    3 / 2) + 2 * (-u4 - 1) * (u4 + 1) * (sqrt((u3 + 1) ** 2 + (u4 + 1) ** 2) - sqrt(2)) / (
                    (u3 + 1) ** 2 + (u4 + 1) ** 2) ** (3 / 2) + 2 * (u4 + 1) ** 2 / (
                    (u3 + 1) ** 2 + (u4 + 1) ** 2) + 2 * (sqrt((u3 + 1) ** 2 + (u4 + 1) ** 2) - sqrt(2)) / sqrt(
        (u3 + 1) ** 2 + (u4 + 1) ** 2) + 2 * (sqrt((-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) - 1) / sqrt(
        (-u2 + u4) ** 2 + (-u1 + u3 + 1) ** 2) + 2 * (u4 + 1) ** 2 / (u3 ** 2 + (u4 + 1) ** 2) + 2 * (
                    sqrt(u3 ** 2 + (u4 + 1) ** 2) - 1) / sqrt(u3 ** 2 + (u4 + 1) ** 2) + 2 * (-u4 - 1) * (
                    u4 + 1) * (sqrt(u3 ** 2 + (u4 + 1) ** 2) - 1) / (u3 ** 2 + (u4 + 1) ** 2) ** (3 / 2)

    return [[du1d1, du2d1, du3d1, du4d1], [du2d1, du2d2, du3d2, du4d2], [du3d1, du3d2, du3d3, du4d3],
            [du4d1, du4d2, du4d3, du4d4]]


n = 4
u = np.zeros(n)
alpha = 0
g = np.zeros(n)
g[1] = 1
g[2] = 1
h = np.zeros(n)
f = model2(u, g)
tol = 1e-12
while np.sqrt(np.dot(np.transpose(f), f)) > tol:
    print("l2 %.12f" % np.sqrt(np.dot(np.transpose(f), f)))
    K = hessian(u)

    h = np.linalg.solve(K, np.multiply(-1, f))
    for i in range(len(u)):
        u[i] += h[i]

    f = model2(u, g)

for i in range(len(u)):
    print("u %.6f" % u[i])

print("mu %.6f" % fu(u,g))
