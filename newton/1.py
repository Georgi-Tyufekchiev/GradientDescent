import numpy as np
from numpy import sqrt


def fu(u):
    u1 = u[0]
    u2 = u[1]
    return (sqrt((1 + u1) ** 2 + (1 + u2) ** 2) - sqrt(2)) ** 2 + (
            sqrt((1 - u1) ** 2 + (1 + u2) ** 2) - sqrt(2)) ** 2 - u1 - u2


def model1(u):
    dmdu1 = 2 * (u[0] - 1) * (sqrt((1 - u[0]) ** 2 + (u[1] + 1) ** 2) - sqrt(2)) / sqrt(
        (1 - u[0]) ** 2 + (u[1] + 1) ** 2) + 2 * (u[0] + 1) * \
            (sqrt((u[0] + 1) ** 2 + (u[1] + 1) ** 2) - sqrt(2)) / sqrt((u[0] + 1) ** 2 + (u[1] + 1) ** 2) - 1

    dmdu2 = 2 * (u[1] + 1) * (sqrt((u[0] + 1) ** 2 + (u[1] + 1) ** 2) - sqrt(2)) / sqrt(
        (u[0] + 1) ** 2 + (u[1] + 1) ** 2) + \
            2 * (u[1] + 1) * (sqrt((1 - u[0]) ** 2 + (u[1] + 1) ** 2) - sqrt(2)) / sqrt(
        (1 - u[0]) ** 2 + (u[1] + 1) ** 2) - 1
    return dmdu1, dmdu2


def hessian(u):
    u1 = u[0]
    u2 = u[1]
    du1d1 = 2 * (1 - u1) * (u1 - 1) * (sqrt((1 - u1) ** 2 + (u2 + 1) ** 2) - sqrt(2)) / (
                (1 - u1) ** 2 + (u2 + 1) ** 2) ** (3 / 2) + 2 * (-u1 - 1) * (u1 + 1) * (
                        sqrt((u1 + 1) ** 2 + (u2 + 1) ** 2) - sqrt(2)) / ((u1 + 1) ** 2 + (u2 + 1) ** 2) ** (
                        3 / 2) + 2 * (u1 - 1) ** 2 / ((1 - u1) ** 2 + (u2 + 1) ** 2) + 2 * (u1 + 1) ** 2 / (
                        (u1 + 1) ** 2 + (u2 + 1) ** 2) + 2 * (sqrt((u1 + 1) ** 2 + (u2 + 1) ** 2) - sqrt(2)) / sqrt(
        (u1 + 1) ** 2 + (u2 + 1) ** 2) + 2 * (sqrt((1 - u1) ** 2 + (u2 + 1) ** 2) - sqrt(2)) / sqrt(
        (1 - u1) ** 2 + (u2 + 1) ** 2)
    du2d1 = 2 * (u1 - 1) * (-u2 - 1) * (sqrt((1 - u1) ** 2 + (u2 + 1) ** 2) - sqrt(2)) / (
                (1 - u1) ** 2 + (u2 + 1) ** 2) ** (3 / 2) + 2 * (u1 - 1) * (u2 + 1) / (
                        (1 - u1) ** 2 + (u2 + 1) ** 2) + 2 * (u1 + 1) * (-u2 - 1) * (
                        sqrt((u1 + 1) ** 2 + (u2 + 1) ** 2) - sqrt(2)) / ((u1 + 1) ** 2 + (u2 + 1) ** 2) ** (
                        3 / 2) + 2 * (u1 + 1) * (u2 + 1) / ((u1 + 1) ** 2 + (u2 + 1) ** 2)
    du2d2 = 2 * (-u2 - 1) * (u2 + 1) * (sqrt((u1 + 1) ** 2 + (u2 + 1) ** 2) - sqrt(2)) / (
                (u1 + 1) ** 2 + (u2 + 1) ** 2) ** (3 / 2) + 2 * (-u2 - 1) * (u2 + 1) * (
                        sqrt((1 - u1) ** 2 + (u2 + 1) ** 2) - sqrt(2)) / ((1 - u1) ** 2 + (u2 + 1) ** 2) ** (
                        3 / 2) + 2 * (u2 + 1) ** 2 / ((u1 + 1) ** 2 + (u2 + 1) ** 2) + 2 * (u2 + 1) ** 2 / (
                        (1 - u1) ** 2 + (u2 + 1) ** 2) + 2 * (sqrt((u1 + 1) ** 2 + (u2 + 1) ** 2) - sqrt(2)) / sqrt(
        (u1 + 1) ** 2 + (u2 + 1) ** 2) + 2 * (sqrt((1 - u1) ** 2 + (u2 + 1) ** 2) - sqrt(2)) / sqrt(
        (1 - u1) ** 2 + (u2 + 1) ** 2)

    return [[du1d1, du2d1], [du2d1, du2d2]]


u = [0, 0]
alpha = 0
h = [0, 0]
f = model1(u)
tol = 1e-12
while np.sqrt(np.dot(np.transpose(f), f)) > tol:
    print("l2 %.12f" % np.sqrt(np.dot(np.transpose(f), f)))
    K = hessian(u)

    h = np.linalg.solve(K, np.multiply(-1, f))
    for i in range(len(u)):
        u[i] += h[i]

    f = model1(u)

print("u %.4f" % u[0])
print("u %.4f" % u[1])

print("mu %.4f" % fu(u))
